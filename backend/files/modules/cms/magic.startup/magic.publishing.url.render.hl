
/*
 * Dynamic slot responsible for retrieving an item according to the given [url].
 *
 * Will return the dynamically rendered document, and return it to caller as value.
 * In addition, it will apply some HTTP headers to the response object, according to
 * settings, and properties from document itself.
 */
slots.create:magic.publishing.url.render

   /*
    * Opening up our database connection.
    */
   wait.mysql.connect:[magic_publishing]

      /*
       * Figuring out from settings for how long items should be cached.
       */
      wait.magic.publishing.settings.get:caching

      /*
       * Fetching item from cache.
       *
       * Notice, this logic implies that even though the document actually changes,
       * it will require "x" number of seconds before the changes are reflected back to the client,
       * due to the server caching parts, that will not even try to retrieve the document
       * from the database, before the cache has been flushed.
       */
      wait.magic.publishing.cache:x:@.arguments/*/url
         seconds:x:@wait.magic.publishing.settings.get
         .lambda

            /*
             * Creating parameters for our SQL.
             */
            unwrap:x:+
            .page-url:x:@.arguments/*/url
            .item-type-url:

            /*
             * Splitting segments of URL.
             */
            strings.split:x:@.arguments/*/url
               .:/

            /*
             * Checking if we have a sub-folder in our URL,
             * implying an explicit (non-default) item_type.
             */
            if
               mt
                  get-count:x:@strings.split/*
                  .:int:2
               .lambda

                  /*
                   * Unsupported URL, too may segments.
                   */
                  slots.return-nodes

            else-if
               eq
                  get-count:x:@strings.split/*
                  .:int:2
               .lambda

                  /*
                   * Item type was explicitly specified as non-default type,
                   * in the specified URL.
                   */
                  set-value:x:@.item-type-url
                     get-value:x:@strings.split/0
                  set-value:x:@.page-url
                     get-value:x:@strings.split/1

            /*
             * Fetching item from database.
             */
            wait.mysql.select:@"select i.author, i.created, i.updated, i.title, i.content, t.content as template from items i
    inner join item_types it on it.name = i.item_type
    inner join templates t on t.name = i.template
    where i.url = @page_url and it.root_resolve_url=@item_type_url"
               @page_url:x:@.page-url
               @item_type_url:x:@.item-type-url

            /*
             * Checking that item actually exists.
             */
            if
               eq
                  get-count:x:@wait.mysql.select/*
                  .:int:0
               .lambda

                  /*
                   * Item was not found in database.
                   */
                  slots.return-nodes
                     status:int:404

            wait.else

               /*
                * Page exists, invoking slot responsible for transforming page into valid output.
                */
               add:x:./*/wait.magic.publishing.transform
                  get-nodes:x:@wait.mysql.select/*/*
               wait.magic.publishing.transform

               /*
                * Returning results to caller.
                */
               magic.publishing.date.convert2utc:x:@wait.mysql.select/*/*/updated
               unwrap:x:+/*
               slots.return-nodes
                  status:int:200
                  content:x:@wait.magic.publishing.transform
                  updated:x:@magic.publishing.date.convert2utc

      /*
       * Checking if nothing was returned from cache, at which
       * point it's a 404 request.
       */
      if
         eq
            get-value:x:@wait.magic.publishing.cache/*/status
            .:int:404
         .lambda

            /*
             * 404 request.
             */
            http.response.status-code.set:404

      else

         /*
          * Checking if document has been untouched sine the "If-Modified-Since" HTTP header,
          * at which point we return a 304.
          */
         log.info:x:@wait.magic.publishing.cache/*/updated
         log.info:x:@.arguments/*/If-Modified-Since
         if
            mt
               get-value:x:@wait.magic.publishing.cache/*/updated
               get-value:x:@.arguments/*/If-Modified-Since
            .lambda

               /*
                * Document has been changed since the client last fetched it.
                * Applying global/common settings.
                */
               unwrap:x:+/*
               slots.signal:magic.publishing.url.settings.apply
                  modified:x:@wait.magic.publishing.cache/*/updated
                  cache:x:@wait.magic.publishing.settings.get

               /*
                * Returning content to caller.
                */
               slots.return-value:x:@wait.magic.publishing.cache/*/content
         else

            /*
             * Document has not been updated since the last time it was fetched from server.
             */
            http.response.status-code.set:304
            
