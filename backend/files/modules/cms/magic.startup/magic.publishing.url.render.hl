
/*
 * Dynamic slot responsible for retrieving an item according
 * to the given [url].
 */
slots.create:magic.publishing.url.render

   /*
    * Opening up our database connection.
    */
   mysql.connect:[magic_publishing]

      /*
       * Figuring out from settings for how long items should be cached.
       */
      magic.publishing.settings.get:caching

      /*
       * Fetching item from cache.
       */
      magic.publishing.cache:x:@.arguments/*/url
         seconds:x:@magic.publishing.settings.get
         .lambda

            /*
             * Creating parameters for our SQL.
             */
            unwrap:x:+
            .page-url:x:@.arguments/*/url
            .item-type-url:

            /*
             * Splitting segments of URL.
             */
            strings.split:x:@.arguments/*/url
               .:/

            /*
             * Checking if we have a sub-folder in our URL,
             * implying an explicit (non-default) item_type.
             */
            if
               mt
                  get-count:x:@strings.split/*
                  .:int:2
               .lambda

                  /*
                   * Unsupported URL, too may segments.
                   */
                  slots.return-nodes

            else-if
               eq
                  get-count:x:@strings.split/*
                  .:int:2
               .lambda

                  /*
                   * Item type was explicitly specified as non-default type,
                   * in the specified URL.
                   */
                  set-value:x:@.item-type-url
                     get-value:x:@strings.split/0
                  set-value:x:@.page-url
                     get-value:x:@strings.split/1

            /*
             * Fetching item from database.
             */
            mysql.select:@"select i.author, i.created, i.updated, i.title, i.content, t.content as template from items i
    inner join item_types it on it.name = i.item_type
    inner join templates t on t.name = i.template
    where i.url = @page_url and it.root_resolve_url=@item_type_url"
               @page_url:x:@.page-url
               @item_type_url:x:@.item-type-url

            /*
             * Checking that item actually exists.
             */
            if
               eq
                  get-count:x:@mysql.select/*
                  .:int:0
               .lambda

                  /*
                   * Item was not found in database.
                   */
                  slots.return-nodes

            else

               /*
                * Page exists, invoking slot responsible for transforming page into valid output.
                */
               add:x:./*/magic.publishing.transform
                  get-nodes:x:@mysql.select/*/*
               magic.publishing.transform

               /*
                * Returning results to caller.
                */
               unwrap:x:+/*
               slots.return-nodes
                  status:int:200
                  content:x:@magic.publishing.transform
                  Last-Modified:x:@mysql.select/*/*/updated

      /*
       * Checking if nothing was returned from cache, at which
       * point it's a 404 request.
       */
      if
         not
            exists:x:@magic.publishing.cache/*
         .lambda

            /*
             * 404 request.
             */
            http.response.status-code.set:404

      else

         /*
          * Applying global/common settings.
          */
         unwrap:x:+/*
         slots.signal:magic.publishing.url.settings.apply
            Last-Modified:x:@magic.publishing.cache/*/Last-Modified

         /*
          * Returning content to caller.
          */
         slots.return-value:x:@magic.publishing.cache/*/content
