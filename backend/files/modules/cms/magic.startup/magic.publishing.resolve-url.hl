
/*
 * Dynamic slot responsible for serving a URL.
 * Expects an optional [url] argument.
 */
slots.create:magic.publishing.resolve-url

   // Making sure we inform the client, and/or proxies, that item can be cached for 5 minutes.
   http.response.headers.add
      Cache-Control:public, max-age=300

   // Checking cache first.
   magic.publishing.cache.get:x:@.arguments/*/url
   if
      not
         eq
            get-value:x:@magic.publishing.cache.get
            .
      .lambda

         // Item with specified URL exists in cache.
         slots.return-value:x:@magic.publishing.cache.get

   // Opening up our database connection.
   mysql.connect:[magic]

      // Creating parameters necessary to fetch item from database.
      unwrap:x:+
      .page-url:x:@.arguments/*/url
      .item-url:

      // Defaulting [.url] to empty if not supplied.
      if
         eq
            get-value:x:@.page-url
            .
         .lambda

            // Default page, empty URL.
            set-value:x:@.page-url
               .:

      else

         /*
          * Not the default page, hence we must check to see what type of page
          * was requested (item_type), and resolve accordingly.
          */
         strings.split:x:@.arguments/*/url
            .:/
         if
            mt
               get-count:x:@strings.split/*
               .:int:1
            .lambda

               // Item type was explicitly specified as part of URL.
               set-value:x:@.item-url
                  get-value:x:@strings.split/0
               remove-node:x:@strings.split/0
               strings.join:x:@strings.split/*
                  .:/
               set-value:x:@.page-url
                  get-value:x:@strings.join

      // Fetching item from database.
      mysql.select:@"select i.author, i.created, i.title, i.content, t.content as template from items i
    inner join item_types it on it.name = i.item_type
    inner join templates t on t.name = i.template
    where i.url = @page and it.root_resolve_url=@item"
         @page:x:@.page-url
         @item:x:@.item-url

      // Checking that item actually exists.
      if
         eq
            get-count:x:@mysql.select/*
            .:int:0
         .lambda

            // Not found
            http.response.status-code.set:404
      else

         // Page exists, invoking slot responsible for transforming page into valid output.
         add:x:./*/magic.publishing.transform
            get-nodes:x:@mysql.select/*/*
         magic.publishing.transform

         // Adding transformed content to cache.
         magic.publishing.cache.set:x:@.arguments/*/url
            get-value:x:@magic.publishing.transform

         // Returning results to caller.
         slots.return-value:x:@magic.publishing.transform


